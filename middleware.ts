import { NextResponse } from 'next/server';import type { NextRequest } from 'next/server';import crypto from 'crypto';function verify(token: string, secret: string){try{const [payloadB64, sigHex] = token.split('.');const h = crypto.createHmac('sha256', secret).update(payloadB64).digest('hex');if (h !== sigHex) return null;const payloadJson = Buffer.from(payloadB64, 'base64').toString('utf8');return JSON.parse(payloadJson);}catch{ return null; }}export function middleware(req: NextRequest) {const url = req.nextUrl;const protectedPaths = ['/dashboard', '/crm'];const isProtected = protectedPaths.some(p => url.pathname === p || url.pathname.startsWith(p + '/'));if (!isProtected) return NextResponse.next();const token = req.cookies.get('session')?.value;const secret = process.env.APP_SESSION_SECRET || '';if (!token || !secret) {return NextResponse.redirect(new URL('/login', req.url));}const payload = verify(token, secret);if (!payload || !payload.email) {return NextResponse.redirect(new URL('/login', req.url));}return NextResponse.next();}export const config = {matcher: ['/dashboard/:path*', '/crm/:path*']};